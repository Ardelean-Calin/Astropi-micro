ARM GAS  /tmp/ccJrbhlp.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	SystemClock_Config:
  27              	.LFB215:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "cordic.h"
  25:Src/main.c    **** #include "i2c.h"
  26:Src/main.c    **** #include "usart.h"
  27:Src/main.c    **** #include "gpio.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/ccJrbhlp.s 			page 2


  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END Includes */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PD */
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  55:Src/main.c    **** void SystemClock_Config(void);
  56:Src/main.c    **** void MX_FREERTOS_Init(void);
  57:Src/main.c    **** /* USER CODE BEGIN PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PFP */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN 0 */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END 0 */
  65:Src/main.c    **** 
  66:Src/main.c    **** /**
  67:Src/main.c    ****   * @brief  The application entry point.
  68:Src/main.c    ****   * @retval int
  69:Src/main.c    ****   */
  70:Src/main.c    **** int main(void)
  71:Src/main.c    **** {
  72:Src/main.c    ****   /* USER CODE BEGIN 1 */
  73:Src/main.c    **** 
  74:Src/main.c    ****   /* USER CODE END 1 */
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  79:Src/main.c    ****   HAL_Init();
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* USER CODE BEGIN Init */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* USER CODE END Init */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* Configure the system clock */
  86:Src/main.c    ****   SystemClock_Config();
  87:Src/main.c    **** 
ARM GAS  /tmp/ccJrbhlp.s 			page 3


  88:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* USER CODE END SysInit */
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* Initialize all configured peripherals */
  93:Src/main.c    ****   MX_GPIO_Init();
  94:Src/main.c    ****   MX_CORDIC_Init();
  95:Src/main.c    ****   MX_I2C2_Init();
  96:Src/main.c    ****   MX_USART2_UART_Init();
  97:Src/main.c    ****   /* USER CODE BEGIN 2 */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE END 2 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* Call init function for freertos objects (in freertos.c) */
 102:Src/main.c    ****   MX_FREERTOS_Init(); 
 103:Src/main.c    ****   /* Start scheduler */
 104:Src/main.c    ****   osKernelStart();
 105:Src/main.c    ****  
 106:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 107:Src/main.c    ****   /* Infinite loop */
 108:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 109:Src/main.c    ****   while (1)
 110:Src/main.c    ****   {
 111:Src/main.c    ****     /* USER CODE END WHILE */
 112:Src/main.c    **** 
 113:Src/main.c    ****     /* USER CODE BEGIN 3 */
 114:Src/main.c    ****   }
 115:Src/main.c    ****   /* USER CODE END 3 */
 116:Src/main.c    **** }
 117:Src/main.c    **** 
 118:Src/main.c    **** /**
 119:Src/main.c    ****   * @brief System Clock Configuration
 120:Src/main.c    ****   * @retval None
 121:Src/main.c    ****   */
 122:Src/main.c    **** void SystemClock_Config(void)
 123:Src/main.c    **** {
  29              		.loc 1 123 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 144
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 30B5     		push	{r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 A5B0     		sub	sp, sp, #148
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 160
 124:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  42              		.loc 1 124 3 view .LVU1
  43              		.loc 1 124 22 is_stmt 0 view .LVU2
  44 0004 3822     		movs	r2, #56
  45 0006 0021     		movs	r1, #0
  46 0008 16A8     		add	r0, sp, #88
  47 000a FFF7FEFF 		bl	memset
  48              	.LVL0:
ARM GAS  /tmp/ccJrbhlp.s 			page 4


 125:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  49              		.loc 1 125 3 is_stmt 1 view .LVU3
  50              		.loc 1 125 22 is_stmt 0 view .LVU4
  51 000e 0024     		movs	r4, #0
  52 0010 1194     		str	r4, [sp, #68]
  53 0012 1294     		str	r4, [sp, #72]
  54 0014 1394     		str	r4, [sp, #76]
  55 0016 1494     		str	r4, [sp, #80]
  56 0018 1594     		str	r4, [sp, #84]
 126:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  57              		.loc 1 126 3 is_stmt 1 view .LVU5
  58              		.loc 1 126 28 is_stmt 0 view .LVU6
  59 001a 4422     		movs	r2, #68
  60 001c 2146     		mov	r1, r4
  61 001e 6846     		mov	r0, sp
  62 0020 FFF7FEFF 		bl	memset
  63              	.LVL1:
 127:Src/main.c    **** 
 128:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 129:Src/main.c    ****   */
 130:Src/main.c    ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
  64              		.loc 1 130 3 is_stmt 1 view .LVU7
  65 0024 4FF40070 		mov	r0, #512
  66 0028 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
  67              	.LVL2:
 131:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 132:Src/main.c    ****   */
 133:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  68              		.loc 1 133 3 view .LVU8
  69              		.loc 1 133 36 is_stmt 0 view .LVU9
  70 002c 0123     		movs	r3, #1
  71 002e 1693     		str	r3, [sp, #88]
 134:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  72              		.loc 1 134 3 is_stmt 1 view .LVU10
  73              		.loc 1 134 30 is_stmt 0 view .LVU11
  74 0030 4FF48033 		mov	r3, #65536
  75 0034 1793     		str	r3, [sp, #92]
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  76              		.loc 1 135 3 is_stmt 1 view .LVU12
  77              		.loc 1 135 34 is_stmt 0 view .LVU13
  78 0036 0223     		movs	r3, #2
  79 0038 1D93     		str	r3, [sp, #116]
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  80              		.loc 1 136 3 is_stmt 1 view .LVU14
  81              		.loc 1 136 35 is_stmt 0 view .LVU15
  82 003a 0325     		movs	r5, #3
  83 003c 1E95     		str	r5, [sp, #120]
 137:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  84              		.loc 1 137 3 is_stmt 1 view .LVU16
  85              		.loc 1 137 30 is_stmt 0 view .LVU17
  86 003e 1F93     		str	r3, [sp, #124]
 138:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 16;
  87              		.loc 1 138 3 is_stmt 1 view .LVU18
  88              		.loc 1 138 30 is_stmt 0 view .LVU19
  89 0040 1022     		movs	r2, #16
  90 0042 2092     		str	r2, [sp, #128]
 139:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  /tmp/ccJrbhlp.s 			page 5


  91              		.loc 1 139 3 is_stmt 1 view .LVU20
  92              		.loc 1 139 30 is_stmt 0 view .LVU21
  93 0044 2193     		str	r3, [sp, #132]
 140:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  94              		.loc 1 140 3 is_stmt 1 view .LVU22
  95              		.loc 1 140 30 is_stmt 0 view .LVU23
  96 0046 2293     		str	r3, [sp, #136]
 141:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  97              		.loc 1 141 3 is_stmt 1 view .LVU24
  98              		.loc 1 141 30 is_stmt 0 view .LVU25
  99 0048 2393     		str	r3, [sp, #140]
 142:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 100              		.loc 1 142 3 is_stmt 1 view .LVU26
 101              		.loc 1 142 7 is_stmt 0 view .LVU27
 102 004a 16A8     		add	r0, sp, #88
 103 004c FFF7FEFF 		bl	HAL_RCC_OscConfig
 104              	.LVL3:
 143:Src/main.c    ****   {
 144:Src/main.c    ****     Error_Handler();
 145:Src/main.c    ****   }
 146:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 147:Src/main.c    ****   */
 148:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 105              		.loc 1 148 3 is_stmt 1 view .LVU28
 106              		.loc 1 148 31 is_stmt 0 view .LVU29
 107 0050 0F23     		movs	r3, #15
 108 0052 1193     		str	r3, [sp, #68]
 149:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 150:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 109              		.loc 1 150 3 is_stmt 1 view .LVU30
 110              		.loc 1 150 34 is_stmt 0 view .LVU31
 111 0054 1295     		str	r5, [sp, #72]
 151:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 112              		.loc 1 151 3 is_stmt 1 view .LVU32
 113              		.loc 1 151 35 is_stmt 0 view .LVU33
 114 0056 1394     		str	r4, [sp, #76]
 152:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 115              		.loc 1 152 3 is_stmt 1 view .LVU34
 116              		.loc 1 152 36 is_stmt 0 view .LVU35
 117 0058 1494     		str	r4, [sp, #80]
 153:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 118              		.loc 1 153 3 is_stmt 1 view .LVU36
 119              		.loc 1 153 36 is_stmt 0 view .LVU37
 120 005a 1594     		str	r4, [sp, #84]
 154:Src/main.c    **** 
 155:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 121              		.loc 1 155 3 is_stmt 1 view .LVU38
 122              		.loc 1 155 7 is_stmt 0 view .LVU39
 123 005c 2946     		mov	r1, r5
 124 005e 11A8     		add	r0, sp, #68
 125 0060 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 126              	.LVL4:
 156:Src/main.c    ****   {
 157:Src/main.c    ****     Error_Handler();
 158:Src/main.c    ****   }
 159:Src/main.c    ****   /** Initializes the peripherals clocks 
 160:Src/main.c    ****   */
ARM GAS  /tmp/ccJrbhlp.s 			page 6


 161:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 127              		.loc 1 161 3 is_stmt 1 view .LVU40
 128              		.loc 1 161 38 is_stmt 0 view .LVU41
 129 0064 8223     		movs	r3, #130
 130 0066 0093     		str	r3, [sp]
 162:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 131              		.loc 1 162 3 is_stmt 1 view .LVU42
 132              		.loc 1 162 38 is_stmt 0 view .LVU43
 133 0068 0294     		str	r4, [sp, #8]
 163:Src/main.c    ****   PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 134              		.loc 1 163 3 is_stmt 1 view .LVU44
 135              		.loc 1 163 36 is_stmt 0 view .LVU45
 136 006a 0794     		str	r4, [sp, #28]
 164:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 137              		.loc 1 164 3 is_stmt 1 view .LVU46
 138              		.loc 1 164 7 is_stmt 0 view .LVU47
 139 006c 6846     		mov	r0, sp
 140 006e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 141              	.LVL5:
 165:Src/main.c    ****   {
 166:Src/main.c    ****     Error_Handler();
 167:Src/main.c    ****   }
 168:Src/main.c    **** }
 142              		.loc 1 168 1 view .LVU48
 143 0072 25B0     		add	sp, sp, #148
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 12
 146              		@ sp needed
 147 0074 30BD     		pop	{r4, r5, pc}
 148              		.cfi_endproc
 149              	.LFE215:
 151              		.section	.text.main,"ax",%progbits
 152              		.align	1
 153              		.global	main
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu fpv4-sp-d16
 159              	main:
 160              	.LFB214:
  71:Src/main.c    ****   /* USER CODE BEGIN 1 */
 161              		.loc 1 71 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ Volatile: function does not return.
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
  79:Src/main.c    **** 
 171              		.loc 1 79 3 view .LVU50
 172 0002 FFF7FEFF 		bl	HAL_Init
 173              	.LVL6:
  86:Src/main.c    **** 
 174              		.loc 1 86 3 view .LVU51
ARM GAS  /tmp/ccJrbhlp.s 			page 7


 175 0006 FFF7FEFF 		bl	SystemClock_Config
 176              	.LVL7:
  93:Src/main.c    ****   MX_CORDIC_Init();
 177              		.loc 1 93 3 view .LVU52
 178 000a FFF7FEFF 		bl	MX_GPIO_Init
 179              	.LVL8:
  94:Src/main.c    ****   MX_I2C2_Init();
 180              		.loc 1 94 3 view .LVU53
 181 000e FFF7FEFF 		bl	MX_CORDIC_Init
 182              	.LVL9:
  95:Src/main.c    ****   MX_USART2_UART_Init();
 183              		.loc 1 95 3 view .LVU54
 184 0012 FFF7FEFF 		bl	MX_I2C2_Init
 185              	.LVL10:
  96:Src/main.c    ****   /* USER CODE BEGIN 2 */
 186              		.loc 1 96 3 view .LVU55
 187 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 188              	.LVL11:
 102:Src/main.c    ****   /* Start scheduler */
 189              		.loc 1 102 3 view .LVU56
 190 001a FFF7FEFF 		bl	MX_FREERTOS_Init
 191              	.LVL12:
 104:Src/main.c    ****  
 192              		.loc 1 104 3 view .LVU57
 193 001e FFF7FEFF 		bl	osKernelStart
 194              	.LVL13:
 195              	.L4:
 109:Src/main.c    ****   {
 196              		.loc 1 109 3 discriminator 1 view .LVU58
 114:Src/main.c    ****   /* USER CODE END 3 */
 197              		.loc 1 114 3 discriminator 1 view .LVU59
 109:Src/main.c    ****   {
 198              		.loc 1 109 9 discriminator 1 view .LVU60
 199 0022 FEE7     		b	.L4
 200              		.cfi_endproc
 201              	.LFE214:
 203              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 204              		.align	1
 205              		.global	HAL_TIM_PeriodElapsedCallback
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv4-sp-d16
 211              	HAL_TIM_PeriodElapsedCallback:
 212              	.LVL14:
 213              	.LFB216:
 169:Src/main.c    **** 
 170:Src/main.c    **** /* USER CODE BEGIN 4 */
 171:Src/main.c    **** 
 172:Src/main.c    **** /* USER CODE END 4 */
 173:Src/main.c    **** 
 174:Src/main.c    ****  /**
 175:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 176:Src/main.c    ****   * @note   This function is called  when TIM2 interrupt took place, inside
 177:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 178:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 179:Src/main.c    ****   * @param  htim : TIM handle
ARM GAS  /tmp/ccJrbhlp.s 			page 8


 180:Src/main.c    ****   * @retval None
 181:Src/main.c    ****   */
 182:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 183:Src/main.c    **** {
 214              		.loc 1 183 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		.loc 1 183 1 is_stmt 0 view .LVU62
 219 0000 08B5     		push	{r3, lr}
 220              	.LCFI4:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 3, -8
 223              		.cfi_offset 14, -4
 184:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* USER CODE END Callback 0 */
 187:Src/main.c    ****   if (htim->Instance == TIM2) {
 224              		.loc 1 187 3 is_stmt 1 view .LVU63
 225              		.loc 1 187 11 is_stmt 0 view .LVU64
 226 0002 0368     		ldr	r3, [r0]
 227              		.loc 1 187 6 view .LVU65
 228 0004 B3F1804F 		cmp	r3, #1073741824
 229 0008 00D0     		beq	.L9
 230              	.LVL15:
 231              	.L6:
 188:Src/main.c    ****     HAL_IncTick();
 189:Src/main.c    ****   }
 190:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* USER CODE END Callback 1 */
 193:Src/main.c    **** }
 232              		.loc 1 193 1 view .LVU66
 233 000a 08BD     		pop	{r3, pc}
 234              	.LVL16:
 235              	.L9:
 188:Src/main.c    ****     HAL_IncTick();
 236              		.loc 1 188 5 is_stmt 1 view .LVU67
 237 000c FFF7FEFF 		bl	HAL_IncTick
 238              	.LVL17:
 239              		.loc 1 193 1 is_stmt 0 view .LVU68
 240 0010 FBE7     		b	.L6
 241              		.cfi_endproc
 242              	.LFE216:
 244              		.section	.text.Error_Handler,"ax",%progbits
 245              		.align	1
 246              		.global	Error_Handler
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv4-sp-d16
 252              	Error_Handler:
 253              	.LFB217:
 194:Src/main.c    **** 
 195:Src/main.c    **** /**
 196:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 197:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccJrbhlp.s 			page 9


 198:Src/main.c    ****   */
 199:Src/main.c    **** void Error_Handler(void)
 200:Src/main.c    **** {
 254              		.loc 1 200 1 is_stmt 1 view -0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 201:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 202:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 205:Src/main.c    **** }
 259              		.loc 1 205 1 view .LVU70
 260 0000 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE217:
 264              		.text
 265              	.Letext0:
 266              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 267              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 268              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 269              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 270              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 271              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc.h"
 272              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc_ex.h"
 273              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 274              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_cordic.h"
 275              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 276              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_i2c.h"
 277              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 278              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 279              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 280              		.file 16 "Inc/cordic.h"
 281              		.file 17 "Inc/i2c.h"
 282              		.file 18 "Inc/usart.h"
 283              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_pwr_ex.h"
 284              		.file 20 "Inc/gpio.h"
 285              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 286              		.file 22 "<built-in>"
ARM GAS  /tmp/ccJrbhlp.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccJrbhlp.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccJrbhlp.s:26     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccJrbhlp.s:152    .text.main:0000000000000000 $t
     /tmp/ccJrbhlp.s:159    .text.main:0000000000000000 main
     /tmp/ccJrbhlp.s:204    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccJrbhlp.s:211    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccJrbhlp.s:245    .text.Error_Handler:0000000000000000 $t
     /tmp/ccJrbhlp.s:252    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_GPIO_Init
MX_CORDIC_Init
MX_I2C2_Init
MX_USART2_UART_Init
MX_FREERTOS_Init
osKernelStart
HAL_IncTick
